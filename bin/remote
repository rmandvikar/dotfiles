#!/bin/sh

#usage: remote
#           [(-l | --log)       [<branch>]]
#           [(-c | --commit)    [<commit>]]
#           [(-t | --tree)      [<branch>] -- [<path>]]
#           [(-d | --diff)      <commit1> [<commit2>]]
#           [--pr               [<pr>]]
#           [--pr --set         <pr>]
#           [--pr --unset       <pr>]
#           [--pr --new]
#           [--prs]
#           [(-b | --branches)]
#           [(-r | --releases)]
#           [(-s | --settings)]
#           [(--actions)]
#           [(--issues)]
#           [(--wiki)]
#           [(-n | --dry-run)]
#
# Browse to remote url or branch's log (commits) or branch's tree
# or a commit or diff between two commits or PRs or branches.

GerritUrlQuery="$GerritUrl/#/q/"

while true; do
	case "$1" in
		-h | --help) print-file-comments "$0"; exit ;;
		-n | --dry-run)
			command="xecho"
			shift
			continue ;;
		-l | --log)
			option="log"
			shift
			remoteBranch="$1"
			if [[ -z "$remoteBranch" ]]; then
				remoteBranch=$(git remote-branch HEAD 2>/dev/null);
			fi
			test ! -z "$1" && shift
			break ;;
		-c | --commit)
			option="commit"
			shift
			commit=$(git rev-parse --verify ${1-HEAD} 2>/dev/null);
			if [[ -z "$commit" ]]; then
				echo 1>&2 "fatal: unknown commit $1"
				exit 1
			fi
			test ! -z "$1" && shift
			break ;;
		-t | --tree)
			option="tree"
			shift
			if [[ "$1" != "--" ]]; then
				# check if file exists
				if ! git cat-file -e "$1" 2>/dev/null; then
					# file
					file="$1"
				else
					# branch
					remoteBranch="$1"
				fi
			fi
			if [[ -z "$remoteBranch" ]]; then
				remoteBranch=$(git remote-branch HEAD 2>/dev/null);
			fi
			if [[ "$1" == "--" ]]; then
				shift
			fi
			if [[ -z "$file" ]]; then
				file="$1"
			fi
			break ;;
		-d | --diff)
			option="diff"
			shift
			# get branch or hash for head
			head=$(git branch-name HEAD 2>/dev/null)
			if [[ -z "$head" ]]; then
				head=$(git rev-parse HEAD)
			fi
			commit1="$1"
			commit1=$(sed -E 's,(HEAD|@),'$head',i' <<< "$commit1")
			if [[ -z "$commit1" ]]; then
				echo 1>&2 "fatal: unknown commit1 '$1'"
				exit 1
			fi
			if ! git cat-file -e "$commit1" 2>/dev/null; then
				echo 1>&2 "fatal: unknown commit1 '$1'"
				exit 1
			fi
			# get remote branch name if local branch
			if git branch-exists "$commit1"; then
				commit1=$(git remote-branch "$commit1")
			fi
			commit2="${2-HEAD}"
			commit2=$(sed -E 's,(HEAD|@),'$head',i' <<< "$commit2")
			if ! git cat-file -e "$commit2" 2>/dev/null; then
				echo 1>&2 "fatal: unknown commit2 '$2'"
				exit 1
			fi
			# get remote branch name if local branch
			if git branch-exists "$commit2"; then
				commit2=$(git remote-branch "$commit2")
			fi
			shift
			test ! -z "$1" && shift
			break ;;
		--prs)
			option="prs"
			shift
			break ;;
		--pr)
			option="pr"
			shift
			pr="$1"
			if [ -z "$pr" ]; then
				pr=$(git config --get branch.$(git branch-name).pr)
			fi
			remoteBranch=$(git remote-branch HEAD 2>/dev/null)
			# set/unset pr, and exit
			case "$1" in
				--set )
					shift
					git config branch.$(git branch-name).pr "$1"
					exit ;;
				--unset )
					shift
					git config --unset branch.$(git branch-name).pr
					exit ;;
				--new )
					option="newpr"
					shift
					break ;;
			esac
			break ;;
		-b | --branches)
			option="branches"
			shift
			break ;;
		-r | --releases)
			option="releases"
			shift
			break ;;
		-s | --settings)
			option="settings"
			shift
			if [ ! -z "$1" ]; then
				settingsPath="$1"
				shift
			fi
			break ;;
		--actions)
			option="actions"
			shift
			break ;;
		--issues)
			option="issues"
			shift
			break ;;
		--wiki)
			option="wiki"
			shift
			break ;;
		--nuget)
			option="nuget"
			shift
			break ;;
		* )
			if [ ! -z "$1" ]; then
				echo 1>&2 "fatal: unknown option $1"
				exit 1
			fi
			break ;;
	esac
done

while true; do
	case "$1" in
		-n | --dry-run)
			command="xecho"
			shift
			break ;;
		* )
			break ;;
	esac
done

# trim out remote if present
remote=$(git remote | head -1)
if [[ ! -z "$remoteBranch" ]]; then
	remoteBranch=$(sed 's,^'"$remote"'/,,' <<< "$remoteBranch")
fi
if [[ ! -z "$commit1" ]]; then
	commit1=$(sed 's,^'"$remote"'/,,' <<< "$commit1")
fi
if [[ ! -z "$commit2" ]]; then
	commit2=$(sed 's,^'"$remote"'/,,' <<< "$commit2")
fi

if [[ "$option" == "log" ]]; then
	if [[ -z "$remoteBranch" ]]; then
		echo 1>&2 "fatal: remoteBranch required"
		exit 1
	fi
elif [[ "$option" == "commit" ]]; then
	if [[ -z "$commit" ]]; then
		echo 1>&2 "fatal: commit required"
		exit 1
	fi
elif [[ "$option" == "tree" ]]; then
	if [[ -z "$remoteBranch" ]]; then
		echo 1>&2 "fatal: remoteBranch required"
		exit 1
	fi
fi

if [[ "$option" == "nuget" ]]; then
	git config nuget.url | ${command-browse}
	exit
fi

git config --get-regex remote\..*\.url \
	| cut -d' ' -f2 \
	| \
		while IFS= read -r line;
		do
			if egrep -q '@'"$GerritUrl"':' <<< "$line"; then
				# gerrit
				sed -r '
					s,\.git$,,
					s,^ssh://.+@'"$GerritUrl"':[0-9]+/,,
					s,^,'"$GerritUrlQuery"'project:,
					' <<< "$line"
			elif egrep -q 'amazonaws.com' <<< "$line"; then
				# codecommit
				region=$(sed '
					s,^.*git-codecommit\.,,
					s,\.amazonaws\.com.*,,
					' <<< "$line")
				if [[ -z "$region" ]]; then
					echo 1>&2 "fatal: region required"
					exit 1
				fi
				if [[ "$option" == "log" ]]; then
					urlPart="commits/$remoteBranch"
				elif [[ "$option" == "commit" ]]; then
					urlPart="commit/$commit"
				elif [[ "$option" == "tree" ]]; then
					urlPart="browse/$remoteBranch/--/"
				fi
				sed '
					s,^.*/repos/,https://'"$region"'.console.aws.amazon.com/codecommit/home?region='"$region"'#/repository/,
					s,$,/,
					s,$,'"$urlPart"',
					' <<< "$line"
			else
				if egrep -q 'bitbucket.org' <<< "$line"; then
					# bitbucket
					if [[ "$option" == "log" ]]; then
						urlPart="/commits/branch/$remoteBranch"
					elif [[ "$option" == "commit" ]]; then
						urlPart="/commits/$commit"
					elif [[ "$option" == "tree" ]]; then
						urlPart="/src/$remoteBranch"
						if [[ ! -z "$file" ]]; then
							urlPart="$urlPart/$file"
						fi
					elif [[ "$option" == "diff" ]]; then
						urlPart="/branches/compare/$commit2..$commit1#diff"
					elif [[ "$option" == "pr" ]]; then
						urlPart="/pull-requests/$pr"
					elif [[ "$option" == "prs" ]]; then
						urlPart="/pull-requests"
					elif [[ "$option" == "branches" ]]; then
						urlPart="/branches"
					fi
				else
					# others: github, gitlab, etc.
					# add log, commit, tree specific url part
					if [[ "$option" == "log" ]]; then
						urlPart="/commits/$remoteBranch"
					elif [[ "$option" == "commit" ]]; then
						urlPart="/commit/$commit"
					elif [[ "$option" == "tree" ]]; then
						urlPart="/tree/$remoteBranch"
						if [[ ! -z "$file" ]]; then
							urlPart="$urlPart/$file"
						fi
					elif [[ "$option" == "diff" ]]; then
						urlPart="/compare/$commit1...$commit2"
					elif [[ "$option" == "pr" ]]; then
						if [[ -z "$pr" ]]; then
							urlPart="/pull/new/$remoteBranch"
						else
							urlPart="/pull/$pr"
						fi
					elif [[ "$option" == "newpr" ]]; then
						urlPart="/pull/new/$remoteBranch"
					elif [[ "$option" == "prs" ]]; then
						urlPart="/pulls"
					elif [[ "$option" == "branches" ]]; then
						urlPart="/branches"
					elif [[ "$option" == "releases" ]]; then
						urlPart="/releases"
					elif [[ "$option" == "settings" ]]; then
						if [[ ! -z "$settingsPath" ]]; then
							urlPart="/settings/$settingsPath"
						else
							urlPart="/settings"
						fi
					elif [[ "$option" == "actions" ]]; then
						urlPart="/actions"
					elif [[ "$option" == "issues" ]]; then
						urlPart="/issues"
					elif [[ "$option" == "wiki" ]]; then
						urlPart="/wiki"
					fi
				fi
				# avoid sed -r as -r is not available on mac
				sed '
					s,\.git$,,
					s,^git@,,
					s,^https://,,
					s,^ssh://,,
					# remove "user:password@" part
					s,^.*:.*@,,
					# remove "user@" part
					s,^.*@,,
					s,:,/,
					# add url part
					s,$,'"$urlPart"',
					' <<< "$line"
			fi
		done \
	| ${command-browse}
