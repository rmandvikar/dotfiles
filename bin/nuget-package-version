#!/bin/sh

#usage:
#   nuget-package-version
#           [(-a | --all)]
#           [<package-name>
#               [(-v | --version)]
#               [(-l | --list)]
#           ]
#
# Show nuget package's version, files, etc. for given nuget package
# name.

while true; do
	case "$1" in
		-h | --help) print-file-comments "$0"; exit ;;
		-a | --all)
			option="all"
			shift
			break ;;
		-v | --version)
			option="version"
			shift ;;
		-l | --list)
			option="list"
			shift ;;
		-* )
			if [ ! -z "$1" ]; then
				echo 1>&2 "fatal: unknown option $1"
				exit 1
			fi
			break ;;
		* )
			if [ -z "$1" ]; then
				break
			fi
			name="$1"
			shift ;;
	esac
done
# defaults
if [ -z "$name" ]; then
	option="all"
elif [ -z "$option" ]; then
	option="version"
fi

# grep for,
#	"<package>" for package references in csproj|packages.configs, and
#	"<package>, for project references in csproj
# text is of format
#	<file>: <package-name> <version>
text=$(
	git grep -E -i "(Include|id)=.+ Version=" \
		-- "*csproj" "*packages.config" | \
	sed -E \
		'
		# PackageReference: Include="name" Version="1.2.3"
		# packages.config: id="name" version="1.2.3"
		s_([^:]+).*(Include|id)="([^"]+)".*Version="([^"]+)".*_\1: \3 \4_ i
		# Reference: Include="name, Version=1.2.3.4
		s_([^:]+).*Include="([^"]+),.*Version=([^,]+),.*_\1: \2 \3_ i
		# remove last 0 from version as
		#	1.2.3.0
		s_(([0-9]+\.){2}[0-9]+)\.0_\1_
		'
	)

# list versions for package (1 package only)
if [[ "$option" == "version" ]]; then
	grep -i " $name " <<< "$text" | \
	sed -E \
		'
		# remove package name
		s,: [^ ]+ ,: ,
		# remove file name
		s,[^:]+: ,,
		' | \
	sort -u
	exit
fi
# list files for package (1 package only)
if [[ "$option" == "list" ]]; then
	grep -i " $name " <<< "$text" | \
	sed -E \
		'
		# remove package name
		s,: [^ ]+ ,: ,
		'
	exit
fi
# list all
echo "$text"
