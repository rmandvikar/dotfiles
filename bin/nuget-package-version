#!/bin/sh

#usage:
#   nuget-package-version
#           [(-a | --all)]
#           [<package-name>
#               [(-v | --version)]
#               [(-l | --list)]
#               [(-u | --update) <version>]
#               [(-d | --delete)]
#           ]
#
# Show nuget package's version, files, etc. or update version or
# delete for given nuget package name.

while true; do
	case "$1" in
		-h | --help) print-file-comments "$0"; exit ;;
		-a | --all)
			option="all"
			shift
			break ;;
		-v | --version)
			option="version"
			shift ;;
		-l | --list)
			option="list"
			shift ;;
		-u | --update)
			option="update"
			shift
			version="$1"
			if [[ -z "$version" ]]; then
				echo 1>&2 "fatal: version cannot be empty"
				exit 1
			fi
			# 4-part version, from 1.2.x.x get 1.2.x|0.x|0
			#version4parts=$(
			#	sed -E \
			#		'
			#		/^[0-9]+(\.[0-9]+){1,3}$/ {
			#			s,$,.0.0,
			#			s,^([0-9]+(\.[0-9]+){3}).+,\1,
			#		}
			#		' <<< "$version"
			#	)
			shift
			break ;;
		-d | --delete)
			option="delete"
			shift ;;
		-* )
			if [ ! -z "$1" ]; then
				echo 1>&2 "fatal: unknown option $1"
				exit 1
			fi
			break ;;
		* )
			if [ -z "$1" ]; then
				break
			fi
			name="$1"
			shift ;;
	esac
done
# defaults
if [ -z "$name" ]; then
	option="all"
elif [ -z "$option" ]; then
	option="version"
fi

# grep for,
#	"<package>" for package references in csproj|packages.configs, and
#	"<package>, for project references in csproj
# text is of format
#	<file>: <package-name> <version>
text=$(
	git grep -E -i "((Include|id)=.+ Version=)|(HintPath)" \
		-- "*csproj" "*packages.config" | \
	sed -E \
		'
		# PackageReference: Include="name" Version="1.2.3"
		# packages.config: id="name" version="1.2.3"
		s_([^:]+).*(Include|id)="([^"]+)".*Version="([^"]+)".*_\1: \3 \4_ i
		# Reference: Include="name, Version=1.2.3.4
		s_([^:]+).*Include="([^"]+),.*Version=([^,]+),.*_\1: \2 \3_ i
		# Reference: <HintPath>..\..\packages\name.1.2.3
		s_([^:]+).*<HintPath>.*\\([^\]+)\.([0-9]+(\.[0-9]+){2,3}).*_\1: \2 \3_ i
		'
	)

# list versions for package (1 package only)
if [[ "$option" == "version" ]]; then
	grep -i " $name " <<< "$text" | \
	sed -E \
		'
		# remove package name
		s,: [^ ]+ ,: ,
		# remove file name
		s,[^:]+: ,,
		' | \
	sort -u
	exit
fi
# list files for package (1 package only)
if [[ "$option" == "list" ]]; then
	grep -i " $name " <<< "$text" | \
	sed -E \
		'
		# remove package name
		s,: [^ ]+ ,: ,
		'
	exit
fi
# update files for package (1 package only)
if [[ "$option" == "update" ]]; then
	# narrow down files for speed
	git grep -E -i -l "$name" \
		-- "*csproj" "*packages.config" | \
	xargs -I_ \
	sed -i -E \
		'
		# PackageReference: Include="name" Version="1.2.3"
		s|(Include="'"$name"'") Version="[^"]+"|\1 Version="'"$version"'"|
		# packages.config: id="name" version="1.2.3"
		s|(id="'"$name"'") version="[^"]+"|\1 version="'"$version"'"|
		# do not update Reference
		# Reference: Include="name, Version=1.2.3.4
		#s|(Include="'"$name"',) Version=[^,]+|\1 Version='"$version4parts"'|
		# Reference: <HintPath>..\..\packages\name.1.2.3
		#s|\\'"$name"'\.([0-9]+(\.[0-9]+){2,3})|\\'"$name"'.'"$version"'|
		' _
	# crlf file
	git status -s | \
		cuts | \
		crlf-file
	exit
fi
if [[ "$option" == "delete" ]]; then
	# narrow down files for speed
	git grep -E -i -l "$name" \
		-- "*csproj" "*packages.config" | \
	xargs -I_ \
	sed -i -E \
		'
		# PackageReference: Include="name" Version="1.2.3"
		\|(Include="'"$name"'") Version="[^"]+"| d
		# packages.config: id="name" version="1.2.3"
		\|(id="'"$name"'") version="[^"]+"| d
		# Reference
		# Reference: Include="name, Version=1.2.3.4
		# Reference: <HintPath>..\..\packages\name.1.2.3
		\|(Include="'"$name"',) Version=[^,]+|,\|</Reference>| d
		' _
	# crlf file
	git status -s | \
		cuts | \
		crlf-file
	exit
fi
# list all
echo "$text"
