#!/usr/bin/env bash

#usage: jwt
#           [(-f | --file) <suffix>]
#
# Create jwt (rsa256).
#
#       Files:
#       jwtRS256.key: pem encoded file with rsa private key
#       jwtRS256.cer: pem encoded file with certificate (begin certificate, end certificate)
#       jwt.header, jwt.payload: files for jwt header, payload
#       
#       To create a private rsa key from pfx,
#       $ winpty openssl pkcs12 -in <name>.pfx -nocerts -out <name>.key.pem
#       $ winpty openssl rsa -in <name>.key.pem -out <name>.key
#       
#       To create a private rsa key from ssh (with empty password),
#       (see https://gist.github.com/ygotthilf/baa58da5c3dd1f69fae9)
#       $ ssh-keygen -t rsa -b 4096 -f <name>.key
#       
#       To create a certificate from private rsa key,
#       $ winpty openssl pkcs12 -in <name>.pfx -nokeys -clcerts -out <name>.cer
#       
#       To see certificate's contents,
#       $ openssl x509 -noout -text -in <name>.cer

while true; do
	case "$1" in
		-h ) print-file-comments "$0"; exit ;;
		-f | --file)
			file=".$2"
			shift; shift;
			continue ;;
		--sub)
			sub="$2"
			shift; shift;
			continue ;;
		--exp)
			exp="$2"
			shift; shift;
			continue ;;
		--iss)
			iss="$2"
			shift; shift;
			continue ;;
		-* )
			if [ ! -z "$1" ]; then
				echo 1>&2 "fatal: unknown option $1"
				exit 1
			fi
			exit ;;
		* )
			break ;;
	esac
done

# files
key="jwtRS256$file.key"
cer="jwtRS256$file.cer"

now=$(date +%s)

# settings
if [ -f "jwt.settings" ]; then
	settings=$(< jwt.settings)
fi

if [ -z "$sub" ]; then
	sub=$(jq -r '.sub // empty' <<< "$settings")
fi

nbf=$(jq '.nbf // empty' <<< "$settings")
if [ -z "$nbf" ]; then
	nbf="$now"
fi
if [ -z "$exp" ]; then
	exp=$(jq '.exp // empty' <<< "$settings")
	if [ -z "$exp" ]; then
		exp=$(("$now" +600))
	fi
fi
iat=$(jq '.iat // empty' <<< "$settings")
if [ -z "$iat" ]; then
	iat="$now"
fi

if [ -z "$iss" ]; then
	iss=$(jq -r '.iss // empty' <<< "$settings")
fi

# header
header=$(< jwt.header)

# payload
payload=$(
	jq \
		--arg now "$now" \
		--arg nbf "$nbf" \
		--arg exp "$exp" \
		--arg iat "$iat" \
		--arg sub "$sub" \
	'
	($now | tonumber) as $now |
	($nbf | tonumber) as $nbf |
	($exp | tonumber) as $exp |
	($iat | tonumber) as $iat |
	($sub | if length == 0 then null else . end) as $sub |
	.nbf = $nbf |
	.exp = $exp |
	.iat = $iat |
	.sub = ($sub // .sub)
	' < jwt.payload
)

# if cer file present
if [ -f "$cer" ]; then
	# header
	kid=$(
		openssl x509 -noout -in "$cer" -fingerprint | \
			sed 's,.*=,,g' | sed 's,:,,g' | \
			lower
	)
	x5t=$(xxd -r -p <<< "$kid" | b64url -w 0)
	x5c=$(cat "$cer" | \
		sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/ p' | \
		sed '/-----.*/ d' | \
		tr -d '\n'
	)
	
	header=$(
		jq \
			--arg kid "$kid" \
			--arg x5t "$x5t" \
			--arg x5c "$x5c" \
		'
		.kid |= replace($kid) |
		.x5t |= replace($x5t) |
		.x5c |= replace([ $x5c ]) |
		denull
		' <<< "$header"
	)
	
	# payload
	if [ -z "$iss" ]; then
		iss=$(
			openssl x509 -noout -in "$cer" -subject -nameopt multiline | \
			sed -n 's/ *commonName *= // p'
		)
		if [ "$iss" == "issuer" ]; then
			iss=$(
				openssl x509 -noout -in "$cer" -issuer -nameopt multiline | \
				sed -n 's/ *commonName *= // p'
			)
		fi
	fi
	jti=$(guidgen)
	
	payload=$(
		jq \
			--arg iss "$iss" \
			--arg jti "$jti" \
		'
		.iss = replace($iss) |
		.jti |= replace($jti) |
		denull
		' <<< "$payload"
	)
fi

rs256_sign()
{
	openssl dgst -sha256 -sign "$key"
}

# remove placeholders of "<KEY>"
 header=$(jq '. | remove_placeholders' <<< "$header")
payload=$(jq '. | remove_placeholders' <<< "$payload")

 header_base64=$(jq -c -j . <<< "${header}"  | b64url -w 0)
payload_base64=$(jq -c -j . <<< "${payload}" | b64url -w 0)

header_payload="${header_base64}.${payload_base64}"
signature=$(printf '%s' "${header_payload}" | rs256_sign | b64url -w 0)

echo "${header_payload}.${signature}"
