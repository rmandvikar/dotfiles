#!/usr/bin/env bash

#usage: jwtd
#           [(-f | --file) <suffix>]
#
# Decode jwt (rsa256).
#
#       Files:
#       jwtRS256.key.pub: pem encoded file with rsa public key
#       
#       To create a public rsa key,
#       $ winpty openssl pkcs12 -in $name.pfx -nokeys -clcerts -out $name.cer
#       $ openssl x509 -in $name.cer -pubkey -noout > $name.key.pub
#       
#       To create a public rsa key from ssh,
#       (see https://gist.github.com/ygotthilf/baa58da5c3dd1f69fae9)
#       $ openssl rsa -in $name.key -pubout -outform PEM -out $name.key.pub
#       
#       See https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file

set -e

while true; do
	case "$1" in
		-h ) print-file-comments "$0"; exit ;;
		-f | --file)
			if [ ! -z "$2" ]; then
				file=".$2"
			fi
			shift; shift;
			break ;;
		-* )
			if [ ! -z "$1" ]; then
				echo 1>&2 "fatal: unknown option $1"
				exit 1
			fi
			exit ;;
		* )
			break ;;
	esac
done

pub="jwtRS256$file.key.pub"

check_x5c()
{
	declare header="${1}"
	x5c=$(printf '%s' "$header" | b64urld | jq -r '.x5c[0] // ""')
	if [ ! -z "$x5c" ]; then
		cer="/tmp/x5c.$(random).cer"
		
		echo -e `
		`"-----BEGIN CERTIFICATE-----\n"`
		`"$x5c\n"`
		`"-----END CERTIFICATE-----\n" \
		>> "$cer"
		
		pub="$cer.key.pub"
		openssl x509 -in "$cer" -pubkey -noout > "$pub"
	fi
}

verify_signature()
{
	declare header_payload="${1}"
	declare signature="${2}"
	if printf '%s' "${header_payload}" | \
		openssl dgst -sha256 -verify "$pub" -signature "$signature" 1>/dev/null; then
		echo "signature verified"
	else
		echo 1>&2 "fatal: INVALID Signature"
		echo 1>&2 'header_payload:'
		echo 1>&2 "'${header_payload}'"
		exit 1
	fi
}

declare token=${1:-$(</dev/stdin)}
IFS='.' read -ra pieces <<< "$token"
declare    header=${pieces[0]}
declare   payload=${pieces[1]}
declare signature=${pieces[2]}

echo "header:"
printf '%s' "${header}"  | b64urld | jq -C .

echo "payload:"
printf '%s' "${payload}" | b64urld | jq -C .

# command substitution skips null byte '\0' so inline and write to file
#signature=$(printf '%s' "$signature" | b64urld)
jwtSign="/tmp/jwt.sign.$(random).out"
printf '%s' "${signature}" | \
	b64urld > "$jwtSign"

check_x5c "${header}"
verify_signature "${header}.${payload}" "$jwtSign" && rm "$jwtSign"
