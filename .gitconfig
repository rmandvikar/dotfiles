# global config

# include alias: this needs to be before [alias]
[include]
	path = alias-work.gitconfig

[core]
	autocrlf = true
[rerere]
	enabled = true

[core]
	editor 			= scite
	preloadindex 	= true
	fscache 		= true
	pager 			= less -x4
[gc]
	#auto = 256 #default 6700

[help]
	autocorrect = 23

[diff]
	tool 			= winmerge
	mnemonicPrefix 	= true
[difftool]
	prompt 	= false
[difftool "winmerge"]
	cmd 	= winmerge.sh "$LOCAL" "$REMOTE" # see gist for winmerge.sh

[merge]
	tool 			= winmerge
[mergetool]
	prompt 			= false
	keepBackup 		= false
	keepTemporaries = false
[mergetool "winmerge"]
	cmd 			= WinMergeU -e -u -wl "$MERGED" # "$REMOTE" "$LOCAL"
	trustExitCode 	= false
[mergetool "meld"]
	keepBackup = false
	trustExitCode = false
	cmd = '/c/Program Files (x86)/meld/meld.exe' "$BASE" "$LOCAL" "$REMOTE" -o "$MERGED"

[alias]
	# note: shell commands (with !) will be executed from the top-level directory of a repository,
	# which may not necessarily be the current directory. so add 'cd ${GIT_PREFIX:-.} &&' before.
	alias 	= 	!"f() { \
					if [[ "$1" == 'conf' ]]; then \
						cat ~/bin/git-conf; \
					else \
						git conf alias."$1"; \
					fi; \
				}; f"
	
	## readonly ##
	s 		= status -s
	sl 		= status
	b 		= branch
	bs 		= branch --sort=committerdate
	co 		= checkout
	d 		= diff
	dt 		= difftool
	mt 		= mergetool
	dw 		= diff --color-words=.
	de 		= diff --ignore-space-at-eol
	ds 		= diff --ignore-all-space
	sb 		= show-branch
	wc 		= whatchanged --oneline
	rp 		= rev-parse
	rl 		= rev-list
	lrcount = rev-list --left-right --count
	lcount 	= rev-list --left-only --count
	rcount 	= rev-list --right-only --count
	note 	= log --pretty=note -1
	cs 		= log --pretty=cs --date=short -1
	lsf 	= ls-files
	lst 	= ls-tree
	
	## write ##
	a 		= add
	c 		= commit
	cm 		= commit -m
	ac 		= !"git add --all && git c"
	acm 	= !"git add --all && git cm"
	ca 		= commit --amend
	can 	= commit --amend --no-edit
	#note: 'git commit --amend --all -u' does not add untracked files
	aca 	= !"git add --all && git ca"
	#note: add --date=now to change author date
	acan 	= !"git add --all && git can" # --date=now
	del 	= rm
	ren 	= mv
	hide 	= update-index --assume-unchanged
	unhide 	= update-index --no-assume-unchanged
	hidden 	= !"git ls-files -v | grep '^h' | cut -c3- | wrap"
	unstage = reset
	#usage: git undo -dx
	undo 	= !"git reset --hard && git clean -f"
	cp 		= cherry-pick
	
	undomerge 	= reset --merge orig_head
	undorebase 	= !"f() { \
					git reset --hard orig_head; \
					: abort only if rebase is in progress; \
					(test -d ".git/rebase-merge" || test -d ".git/rebase-apply") \
						&& git rebase --abort; \
				}; f"
	
	## advanced ##
	# force branches to point to their remote branches
	#usage: git branch-reset master next dev
	breset 	= 	!"f() { \
					: get current branch; \
					: note: 'git symbolic-ref --short HEAD' throws when in 'detached HEAD' state; \
					currBranch=$(git rev-parse --abbrev-ref HEAD); \
					: if no arg, breset current branch; \
					if [ -z "$1" ]; then \
						set -- "$currBranch"; \
					fi; \
					for ((i=1;i<=$#;i++)); do \
						branch=$(git rev-parse --abbrev-ref ${!i}); \
						remoteBranch=$(git rev-parse --abbrev-ref $branch@{u} 2>/dev/null); \
						if [ -z $remoteBranch ]; then \
							echo 1>&2 "fatal: no remote branch for branch $branch"; \
							continue; \
						fi; \
						if [ "$branch" = "$currBranch" ]; then \
							: if current branch, then reset --hard; \
							command=$(echo "git reset --hard $remoteBranch"); \
							echo "$command"; \
							$command; \
						else \
							: else force branch; \
							command=$(echo "git branch -f $branch $remoteBranch"); \
							echo "$command"; \
							$command; \
						fi; \
					done; \
				}; f"
	branch-reset 	= !"f() { git breset "$@"; }; f"
	
	# fuzzy checkout using a partial branch name
	#usage: git coe branch
	coe 	= 	!"f() { \
					: short-circuit to checkout; \
					if [ $# -gt 1 ] || [ "$1" == "." ] || [ "$1" == "-" ] || [[ "$1" == *":"* ]]; then \
						git checkout "$@"; \
						return; \
					fi; \
					: grep for local branches except current; \
					branches=($(git b | grep -v "^\\*" | grep "$1" | cut -c3-)); \
					: die if no branches matched; \
					if [ ${#branches[@]} -eq 0 ]; then \
						echo 1>&2 "fatal: no branch matched"; \
						return; \
					fi; \
					: die if 2+ branches matched; \
					if [ ${#branches[@]} -ge 2 ]; then \
						echo 1>&2 "fatal: multiple branches matched"; \
						for branch in ${branches[@]}; do \
							echo 1>&2 -e '  '$branch; \
						done; \
						return; \
					fi; \
					git checkout ${branches[0]}; \
				}; f"
	
	# rough guess of which branch in the given branches current branch is branched from
	#usage: git branched-from branch1 branch2
	bfrom = 	!"f() { \
					: head or current branch; \
					commit="@"; \
					: some large number; \
					min="314159265"; \
					for ((branch=1;branch<=$#;branch++)); do \
						: pick branch with least right-only count; \
						count=$(git rev-list --right-only --count $commit...${!branch}); \
						: echo "${!branch} - $count"; \
						if [ $count -lt $min ]; then \
							min=$count; \
							target="${!branch}"; \
						elif [ $count -eq $min ]; then \
							: pick branch if it contains the target branch; \
							bcount=$(git rev-list --right-only --count "${target}".."${!branch}"); \
							: echo "    bcount: ${bcount}"; \
							if [ $bcount -gt 0 ]; then \
								target="${!branch}"; \
							fi \
						fi; \
					done; \
					echo "$target"; \
				}; f"
	branched-from 	= !"f() { git bfrom "$@"; }; f"

[pretty]
	lgoc 	= "format:%C(auto)%h%C(reset)%C(auto)%d%C(reset) %C(#ffff99)%s%C(reset) - %C(#ffb799)%aN%C(reset)"
	one 	= "format:%C(auto)%h%C(reset) %C(#ffaaff)(%ar)%C(reset) %C(#ffff99)%s%C(reset) - %C(#ffb799)%aN%C(reset)%C(auto)%d%C(reset)"
	two 	= "format:%C(auto)%h%C(reset) - %C(#ffeeff)%aD%C(reset) %C(#ffaaff)(%ar)%C(reset)%C(auto)%d%C(reset)%n  %C(#ffff99)%s%C(reset) - %C(#ffb799)%aN%C(reset)"
	note 	= "format:%H"
	cs 		= "format:%H (\"%s\", %ad)"
[alias]
	#hint: add --all to see whole repo
	l 		= log --graph --date=relative --decorate --abbrev-commit --pretty=two
	last 	= log --graph --date=relative --decorate --abbrev-commit --pretty=two -1
	lo 		= log --oneline --decorate --abbrev-commit
	lg  	= log --graph --decorate --abbrev-commit
	lgo 	= log --graph --oneline --decorate --abbrev-commit
	lgoc 	= log --graph --date=relative --decorate --abbrev-commit --pretty=lgoc
	lg1 	= log --graph --date=relative --decorate --abbrev-commit --pretty=one
	lg2 	= log --graph --date=relative --decorate --abbrev-commit --pretty=two
	l1 		= log --date=relative --decorate --abbrev-commit --pretty=one
	l2 		= log --date=relative --decorate --abbrev-commit --pretty=two

# default options for commands
[log]
	decorate 	= short
	mailmap 	= true
	follow 		= true
	# exclude blue and bold blue due to visibility
	graphColors = red, green, yellow, magenta, cyan, bold red, bold green, bold yellow, bold magenta, bold cyan

[push]
	default = current

[format]
	pretty = fuller

[status]
	showUntrackedFiles 	= all
	#branch 			= true
	#short 				= true

[merge]
	log 			= true
	ff 				= false
	#conflictStyle 	= diff3

[merge "ours"]
	driver = ~/git-merge-keep-ours.sh %O %A %B
[merge "ours-fail"]
	driver = ~/git-merge-keep-ours-fail.sh %O %A %B
[merge "theirs"]
	driver = ~/git-merge-keep-theirs.sh %O %A %B
[merge "theirs-fail"]
	driver = ~/git-merge-keep-theirs-fail.sh %O %A %B

[branch "master"]
	mergeOptions = --no-ff

[pull]
	rebase 	= true

[branch]
	autoSetupMerge 		= false
	autoSetupRebase 	= always

# templates
[init]
	templateDir = ~/.git-templates
[core]
	hooksPath 	= ~/.git-hooks

# url shortcuts
# git clone h:github:rmandvikar/csharp-trie
[url "https://github.com/"]
	insteadOf = h:github:
# git clone s:github:rmandvikar/csharp-trie
[url "git@github.com:"]
	insteadOf = s:github:
# git clone h:gitlab:rmandvikar/<project>
[url "https://gitlab.com/"]
	insteadOf = h:gitlab:
# git clone h:rm:csharp-trie
[url "https://github.com/rmandvikar/"]
	insteadOf = h:rm:
# git clone s:rm:csharp-trie
[url "git@github.com:rmandvikar/"]
	insteadOf = s:rm:

# color: normal, black, red, green, yellow, blue, magenta, cyan, white
# attribute: bold, dim, ul, blink, reverse
[color]
	diff 		= true
	status 		= true
	branch 		= true
	interactive = true
	ui 			= true
	pager 		= true

# default colors: http://shallowsky.com/blog/programming/gitcolors.html
[color "diff"]
	#plain 		= normal
	#meta 		= normal
	commit 		= "#7eb6ff" # ~blue
	whitespace 	= normal red
	frag 		= bold cyan
	old 		= "#fc9f9f" # ~red
	new 		= "#c9ffc9" # ~green

[color "status"]
	#header 	= white
	added 		= "#c9ffc9" # ~green
	changed 	= "#fc9f9f" # ~red
	untracked 	= "#fc9f9f" # ~red
	branch 		= cyan
	nobranch 	= bold red

[color "branch"]
	current 	= cyan
	#local 		= green
	remote 		= bold red
	upstream 	= bold red

[color "decorate"]
	#branch 		= normal
	#remoteBranch 	= normal
	#tag 			= normal
	#stash 			= normal
	#HEAD 			= bold cyan

[color "interactive"]
	prompt 	= "#ff88ff"
	#header = normal
	#help 	= normal
	#error 	= normal

[include]
	# user
	path = user.gitconfig
	# overrides: this needs to be the last line
	path = overrides.gitconfig
